///////////////////////////////////////////////////////////////////////
// Xml.cs - Generates Test.xml consisting of the information         //
//          generated by the Code Analyzer application in XML format //
// ver 1.0                                                           //
// Language:    C#, 2008, .Net Framework 4.0                         //
// Platform:    Dell Inspiron 17R 5721, Win 8.1                      //
//              Microsoft Visual Studio 2013 Ultimate                //
// Application: Code Analyzer for CSE681, Project #2, Fall 2014      //
// Author:      Akhil Panchal, MS Computer Science,                  //
//              Syracuse University, (408) 921-0731, ahpancha@syr.edu//
///////////////////////////////////////////////////////////////////////
/*
* Package Operations:
* -------------------
* Generates Output information in XML format and stores it in Test.xml file.
*
* Required Files:
* IRuleAndAction.cs, RulesAndActions.cs, Parser.cs, ScopeStack.cs,
* Semi.cs, Toker.cs
*   
* Maintenance History:
* --------------------
* version 1.0 : 08 Oct 2014
* - first release
*/
using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Xml.Linq;
using System.Xml;

namespace CodeAnalysis
{
    
    public class Xml
    {
        public static void createXml(){
            Repository rep=Repository.getInstance();
            List<Elem> locationtable = rep.locations;
            List<Type> typetable = rep.typetable;
            List<Relationship> relationshiptable = rep.relationshiptable;
            List<Relationship> temp = new List<Relationship>();
            int i = 0;
            XDocument xdoc1 = new XDocument();
            XElement root = new XElement("CodeAnalysis");
            xdoc1.Add(root);
            XElement typeinfo = new XElement("Information", new XAttribute("about","types"),
                from e in typetable select new XElement("typeentry",
                    new XAttribute("type",e.type),
                    new XAttribute("name",e.name),
                    new XAttribute("namespace",e.nspace)
                    ));
            XElement funcinfo = new XElement("Information",new XAttribute("about","functions"),
                from d in locationtable where d.type=="function" select new XElement("function",
                    new XAttribute("name", d.name),
                    new XAttribute("size", d.end - d.begin),
                    new XAttribute("complexity", d.complexity)
                    ));
            XElement typerelationshipsinfo = new XElement("Information");
            typerelationshipsinfo.Add(new XAttribute("about", "typerelationships"));
            for (i = 0; i < relationshiptable.Count-1;i++ ){
                XElement eachtype = new XElement("type");
                eachtype.Add(new XAttribute("type1", relationshiptable[i].type1));
                eachtype.Add(new XAttribute("name1", relationshiptable[i].name1));            
                   do{
                       eachtype.Add(new XElement("type",
                           new XAttribute("type2", relationshiptable[i].type2),
                           new XAttribute("name2", relationshiptable[i].name2),
                           new XAttribute("relationship", relationshiptable[i].relationship)
                               )
                         );
                       if (i == relationshiptable.Count-1)
                           break;
                       i++;
                   }while (relationshiptable[i].name1 == relationshiptable[i - 1].name1 && i<relationshiptable.Count);
                   typerelationshipsinfo.Add(eachtype);
                   i--;
            }
            xdoc1.Root.Add(typeinfo);
            xdoc1.Root.Add(funcinfo);
            xdoc1.Root.Add(typerelationshipsinfo);
            xdoc1.Save("Analysis.xml");
            Console.WriteLine("\nXML Output Stored at location:");
            Console.WriteLine(Path.GetFullPath("Analysis.xml"));            
        }

//TEST STUB
#if(TEST_XML)
        static void Main(string[] args)
        {
            createXml();
        }
#endif
    }
}
